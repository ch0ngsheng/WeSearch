// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RetrieveClient is the client API for Retrieve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetrieveClient interface {
	Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error)
	CreateDoc(ctx context.Context, in *DocumentCreateReq, opts ...grpc.CallOption) (*DocumentCreateResp, error)
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
}

type retrieveClient struct {
	cc grpc.ClientConnInterface
}

func NewRetrieveClient(cc grpc.ClientConnInterface) RetrieveClient {
	return &retrieveClient{cc}
}

func (c *retrieveClient) Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/retrieve.Retrieve/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrieveClient) CreateDoc(ctx context.Context, in *DocumentCreateReq, opts ...grpc.CallOption) (*DocumentCreateResp, error) {
	out := new(DocumentCreateResp)
	err := c.cc.Invoke(ctx, "/retrieve.Retrieve/CreateDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrieveClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/retrieve.Retrieve/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetrieveServer is the server API for Retrieve service.
// All implementations must embed UnimplementedRetrieveServer
// for forward compatibility
type RetrieveServer interface {
	Version(context.Context, *VersionReq) (*VersionResp, error)
	CreateDoc(context.Context, *DocumentCreateReq) (*DocumentCreateResp, error)
	Search(context.Context, *SearchReq) (*SearchResp, error)
	mustEmbedUnimplementedRetrieveServer()
}

// UnimplementedRetrieveServer must be embedded to have forward compatible implementations.
type UnimplementedRetrieveServer struct {
}

func (UnimplementedRetrieveServer) Version(context.Context, *VersionReq) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedRetrieveServer) CreateDoc(context.Context, *DocumentCreateReq) (*DocumentCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoc not implemented")
}
func (UnimplementedRetrieveServer) Search(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedRetrieveServer) mustEmbedUnimplementedRetrieveServer() {}

// UnsafeRetrieveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetrieveServer will
// result in compilation errors.
type UnsafeRetrieveServer interface {
	mustEmbedUnimplementedRetrieveServer()
}

func RegisterRetrieveServer(s *grpc.Server, srv RetrieveServer) {
	s.RegisterService(&_Retrieve_serviceDesc, srv)
}

func _Retrieve_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrieveServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retrieve.Retrieve/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrieveServer).Version(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieve_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrieveServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retrieve.Retrieve/CreateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrieveServer).CreateDoc(ctx, req.(*DocumentCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieve_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrieveServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retrieve.Retrieve/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrieveServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Retrieve_serviceDesc = grpc.ServiceDesc{
	ServiceName: "retrieve.Retrieve",
	HandlerType: (*RetrieveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Retrieve_Version_Handler,
		},
		{
			MethodName: "CreateDoc",
			Handler:    _Retrieve_CreateDoc_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Retrieve_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/service.proto",
}
