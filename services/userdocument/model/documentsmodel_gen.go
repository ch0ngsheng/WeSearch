// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	documentsFieldNames          = builder.RawFieldNames(&Documents{})
	documentsRows                = strings.Join(documentsFieldNames, ",")
	documentsRowsExpectAutoSet   = strings.Join(stringx.Remove(documentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	documentsRowsWithPlaceHolder = strings.Join(stringx.Remove(documentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	documentsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Documents) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id int64) (*Documents, error)
		FindOneByUrl(ctx context.Context, session sqlx.Session, url string) (*Documents, error)
		Update(ctx context.Context, session sqlx.Session, data *Documents) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultDocumentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Documents struct {
		Id          int64          `db:"id"`          // document id
		Url         string         `db:"url"`         // document url
		Hash        string         `db:"hash"`        // url hash
		Title       sql.NullString `db:"title"`       // document title
		Description sql.NullString `db:"description"` // document description
		CreatedAt   time.Time      `db:"created_at"`  // document collect time
	}
)

func newDocumentsModel(conn sqlx.SqlConn) *defaultDocumentsModel {
	return &defaultDocumentsModel{
		conn:  conn,
		table: "`documents`",
	}
}

func (m *defaultDocumentsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDocumentsModel) FindOne(ctx context.Context, session sqlx.Session, id int64) (*Documents, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", documentsRows, m.table)
	var resp Documents
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, id)
	}
	err = m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDocumentsModel) FindOneByUrl(ctx context.Context, session sqlx.Session, url string) (*Documents, error) {
	var resp Documents
	query := fmt.Sprintf("select %s from %s where `url` = ? limit 1", documentsRows, m.table)
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, query, url)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, query, url)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDocumentsModel) Insert(ctx context.Context, session sqlx.Session, data *Documents) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, documentsRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Url, data.Hash, data.Title, data.Description)
	}
	return m.conn.ExecCtx(ctx, query, data.Url, data.Hash, data.Title, data.Description)
}

func (m *defaultDocumentsModel) Update(ctx context.Context, session sqlx.Session, newData *Documents) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, documentsRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, newData.Url, newData.Hash, newData.Title, newData.Description, newData.Id)
	}
	return m.conn.ExecCtx(ctx, query, newData.Url, newData.Hash, newData.Title, newData.Description, newData.Id)
}

func (m *defaultDocumentsModel) tableName() string {
	return m.table
}
