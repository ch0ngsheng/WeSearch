// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserDocumentClient is the client API for UserDocument service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDocumentClient interface {
	Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error)
	CreateDoc(ctx context.Context, in *DocumentCollectReq, opts ...grpc.CallOption) (*DocumentCollectResp, error)
	SearchDoc(ctx context.Context, in *DocumentSearchReq, opts ...grpc.CallOption) (*DocumentSearchResp, error)
	FindUserDoc(ctx context.Context, in *FindUserDocReq, opts ...grpc.CallOption) (*FindUserDocResp, error)
}

type userDocumentClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDocumentClient(cc grpc.ClientConnInterface) UserDocumentClient {
	return &userDocumentClient{cc}
}

func (c *userDocumentClient) Version(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/userdocument.UserDocument/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDocumentClient) CreateDoc(ctx context.Context, in *DocumentCollectReq, opts ...grpc.CallOption) (*DocumentCollectResp, error) {
	out := new(DocumentCollectResp)
	err := c.cc.Invoke(ctx, "/userdocument.UserDocument/CreateDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDocumentClient) SearchDoc(ctx context.Context, in *DocumentSearchReq, opts ...grpc.CallOption) (*DocumentSearchResp, error) {
	out := new(DocumentSearchResp)
	err := c.cc.Invoke(ctx, "/userdocument.UserDocument/SearchDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDocumentClient) FindUserDoc(ctx context.Context, in *FindUserDocReq, opts ...grpc.CallOption) (*FindUserDocResp, error) {
	out := new(FindUserDocResp)
	err := c.cc.Invoke(ctx, "/userdocument.UserDocument/FindUserDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDocumentServer is the server API for UserDocument service.
// All implementations must embed UnimplementedUserDocumentServer
// for forward compatibility
type UserDocumentServer interface {
	Version(context.Context, *VersionReq) (*VersionResp, error)
	CreateDoc(context.Context, *DocumentCollectReq) (*DocumentCollectResp, error)
	SearchDoc(context.Context, *DocumentSearchReq) (*DocumentSearchResp, error)
	FindUserDoc(context.Context, *FindUserDocReq) (*FindUserDocResp, error)
	mustEmbedUnimplementedUserDocumentServer()
}

// UnimplementedUserDocumentServer must be embedded to have forward compatible implementations.
type UnimplementedUserDocumentServer struct {
}

func (UnimplementedUserDocumentServer) Version(context.Context, *VersionReq) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedUserDocumentServer) CreateDoc(context.Context, *DocumentCollectReq) (*DocumentCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoc not implemented")
}
func (UnimplementedUserDocumentServer) SearchDoc(context.Context, *DocumentSearchReq) (*DocumentSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDoc not implemented")
}
func (UnimplementedUserDocumentServer) FindUserDoc(context.Context, *FindUserDocReq) (*FindUserDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserDoc not implemented")
}
func (UnimplementedUserDocumentServer) mustEmbedUnimplementedUserDocumentServer() {}

// UnsafeUserDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDocumentServer will
// result in compilation errors.
type UnsafeUserDocumentServer interface {
	mustEmbedUnimplementedUserDocumentServer()
}

func RegisterUserDocumentServer(s *grpc.Server, srv UserDocumentServer) {
	s.RegisterService(&_UserDocument_serviceDesc, srv)
}

func _UserDocument_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDocumentServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userdocument.UserDocument/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDocumentServer).Version(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDocument_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDocumentServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userdocument.UserDocument/CreateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDocumentServer).CreateDoc(ctx, req.(*DocumentCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDocument_SearchDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDocumentServer).SearchDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userdocument.UserDocument/SearchDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDocumentServer).SearchDoc(ctx, req.(*DocumentSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDocument_FindUserDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDocumentServer).FindUserDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userdocument.UserDocument/FindUserDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDocumentServer).FindUserDoc(ctx, req.(*FindUserDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserDocument_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userdocument.UserDocument",
	HandlerType: (*UserDocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _UserDocument_Version_Handler,
		},
		{
			MethodName: "CreateDoc",
			Handler:    _UserDocument_CreateDoc_Handler,
		},
		{
			MethodName: "SearchDoc",
			Handler:    _UserDocument_SearchDoc_Handler,
		},
		{
			MethodName: "FindUserDoc",
			Handler:    _UserDocument_FindUserDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/service.proto",
}
