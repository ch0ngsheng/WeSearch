package wx

import (
	"context"
	"net/http"

	"github.com/silenceper/wechat/v2/officialaccount/message"
	"github.com/zeromicro/go-zero/core/logx"

	"chongsheng.art/wesearch/services/wxmanager/api/internal/svc"
)

type MessageWithRawHTTPLogic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

func NewMessageWithRawHTTPLogic(ctx context.Context, svcCtx *svc.ServiceContext) *MessageWithRawHTTPLogic {
	return &MessageWithRawHTTPLogic{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *MessageWithRawHTTPLogic) MessageWithRawHTTP(w http.ResponseWriter, r *http.Request) {
	// generated by custom templates
	logx.Infof("receiving wx message...")
	server := l.svcCtx.WeChatAccount.OfficialAccount.GetServer(r, w)
	server.SkipValidate(true)
	server.SetMessageHandler(func(msg *message.MixMessage) *message.Reply {
		// 实际处理消息
		return l.svcCtx.WxMsgHandler.Do(msg)
	})

	//处理消息接收以及回复
	err := server.Serve()
	if err != nil {
		if len(server.GetOpenID()) == 0 {
			w.WriteHeader(http.StatusForbidden)
			_, _ = w.Write([]byte("request is not from wechat."))
			logx.Errorf("request is not from wechat.")
			return
		}
		w.WriteHeader(http.StatusInternalServerError)
		logx.Errorf("Serve WX message Error, err=%+v, openID: %s", err, server.GetOpenID())
		return
	}
	//发送回复的消息
	err = server.Send()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		logx.Errorf("Send WX message Error, err=%+v", err)
		return
	}
}
